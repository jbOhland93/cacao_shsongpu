#!/usr/bin/env bash
# cacao environment variables for setup
# This file will be sourced by cacao-setup

export CACAO_LOOPNAME="artao-loop"
export CACAO_LOOPNUMBER="8"

# ====== DEFORMABLE MIRROR ==========

# Deformable mirror (DM) size
# If DM is single dimension, enter "1" for DMsize
#
export CACAO_DMINDEX="01"
export CACAO_DMSIMINDEX="11" # Simulation DM
export CACAO_DMxsize="96"
export CACAO_DMysize="1"

# 1 if DM actuators are on a coordinate grid
# This informs processes if a spatial relationship exists
# between DM actuators
# If 0, CACAO_DMxsize=n_actuators and CACAO_DMysize=1
export CACAO_DMSPATIAL="0"


# ====== DIRECTORIES ================

# Root directory
export CACAO_LOOPROOTDIR="${CACAO_LOOPNAME}-rootdir"

# Run directory. This is a subdirectory of rootdir
# processes run in CACAO_LOOPROOTDIR/CACAO_LOOPRUNDIR
export CACAO_LOOPRUNDIR="${CACAO_LOOPNAME}-rundir"

# input SHS stream
# TODO: follow naming convention
# TODO: implement changable names in ximea acquisition program
export CACAO_SHSSTREAM="aol${CACAO_LOOPNUMBER}_shsCam"

# input WFS stream (equals result of SHS evaluation in this case)
export CACAO_WFSSTREAM="aol${CACAO_LOOPNUMBER}_shsEval_wfOut"
#export CACAO_WFSSTREAMSIM="shwfs_slopes_sim" # Simulation shs stream

# Specify that WFS stream is not raw image, but processed WFS signal
# If set to ON, this turns off intensity scaling
export CACAO_WFSSTREAM_PROCESSED="ON"

export CACAO_LOOPDATALOGDIR="$(pwd)/datalogdir"



# ========================================
#       FPS processes to be set up
# ========================================

## SHS Evaluation
# Record a reference for the SHS
# fps name: shsOnGPU-Ref-8
export CACAO_FPSPROC_SHSONGPU_REF="ON"
# Evaluate SHS images on GPU, based on the recorded reference
# fps name: shsOnGPU-Eval-8
export CACAO_FPSPROC_SHSONGPU_EVAL="ON"

## Pupil reshaping of evaluation outputs for monitoring
## Note: Only works if streams are transferred into host memory.
##       Change that in the evaluation fps under .comp
# Reshape the gradient
# fps name: reshape-Gradient-8
export CACAO_FPSPROC_RSHP_SHSONGPU_GRAD="ON"
# Reshape the wavefront
# fps name: reshape-Wavefront-8
export CACAO_FPSPROC_RSHP_SHSONGPU_WF="ON"
# Reshape the intensity
# fps name: reshape-Intensity-8
export CACAO_FPSPROC_RSHP_SHSONGPU_INT="ON"
# Reshape the wavefront after correction
# fps name: reshape-WF-Corrected-8
export CACAO_FPSPROC_RSHP_ACQWF_C="ON"
# Reshape the time-averaged wavefront
# fps name: reshape-WF-AVG-8
export CACAO_FPSPROC_RSHP_ACQWF_AVG="ON"

## Logging of various streams
# Log SHS camera
# fps name: log-SHS-8
export CACAO_FPSPROC_LOG_SHSONGPU_SHS="OFF"
# Log extracted gradient field (1D, two lines)
# fps name: log-Gradient-8
export CACAO_FPSPROC_LOG_SHSONGPU_GRAD="OFF"
# Log reconstructed wavefront (1D)
# fps name: log-Wavefront-8
export CACAO_FPSPROC_LOG_SHSONGPU_WF="ON"
# Log SHS intensity (1D)
# fps name: log-Intensity-8
export CACAO_FPSPROC_LOG_SHSONGPU_INT="OFF"


# DM combination
# Manages mutipe DM channels
# fps name: DMch2disp-01
#
# DMch2disp-01 - number presumably DM index
# Output:
#   aol8_dmdisp     ->dm01disp
# Inputs:
#   aol8_dmO        ->dm01disp00
#                     dm01disp01
#   aol8_dmRM       ->dm01disp02
#   aol8_dmC        ->dm01disp03
#   aol8_dmZP0      ->dm01disp04
#   aol8_dmZP1      ->dm01disp05
#   aol8_dmZP2      ->dm01disp06
#   aol8_dmoffloadC ->dm01disp07
#   aol8_dmZP3      ->dm01disp07
#   aol8_dmZP4      ->dm01disp08
#   aol8_dmZP5      ->dm01disp09
#   aol8_dmZP6      ->dm01disp10
#   aol8_dmturb     ->dm01disp10
#   aol8_dmZP7      ->dm01disp11
export CACAO_FPSPROC_DMCH2DISP="ON"
export CACAO_FPSPROC_DMCH2DISPSIM="ON"

# DM turbulence simulator
# Outputs:
#   dmstream = Stream into DM comb
#       default: aol8_dmturb - links to dm01disp10
export CACAO_FPSPROC_DMATMTURB="ON"



# Delay stream: emulates time lag in hardware
# Used to simulate a time lag
#
#export CACAO_FPSPROC_DMSIMDELAY="ON"

# MVM lop on GPU: used to simulate hardware
#
#export CACAO_FPSPROC_SIMMVMGPU="ON"



# Measure hardware latency
# fps name: mlat-8
#   dmstream = DM channels
#       default: aol8_dmRM. Created when running DMch2disp.
#   wfsstream = WF
#       default: aol8_wfsim.
#       Links to actual WF output. No need to change.
# export CACAO_FPSPROC_MLAT="ON"
# ===
# Instead, use the equivalent for slow DMs
# Measure hardware latency
# fps name: mlat-slowDM-8
export CACAO_FPSPROC_MLAT_SLOWDM="ON"


# Acquire WFS stream
# Taylored to pyramid WFSs, but provides useful functionality anyhow.
# fps name: acquWFS-8
# Input parameters:
#   insname = input stream name
#       default: aol8_wfsim
#       Links to actual WF output. No need to change.
#   wfszpo = zero point offset of the WFS for reference correction, optional
#       default: aol8_wfszpo
#       Generated after launching process. Can be "dosed" into the reference
#       using the WFSrefcmult parameter.
# Input streams, generated by default:
#   aol8_wfsmask = masking the WFS
#       Unnecessary for evaluated SHS.
#   aol8_wfsref = reference WF
#       While the SHS evaluation uses its own reference, this can be used
#       to offset the WF, similarly to the ZPO, but without mixing.
# Output parameters:
#   none
# Output streams, generated by default:
#   aol8_imWFS0 = darkframe subtraction
#       Unnecessary for evaluated SHS.
#       Turned off in fpssetup.setval.conf
#   aol8_imWFS1 = normalization
#       Unnecessary for evaluated SHS.
#       Turned off in fpssetup.setval.conf
#   aol8_imWFS2 = reference subtraction
#       Useful for subtracting a reference and ZPO, or both.
#   aol8_imWFS3 = moving average of the WFS
#       Self descriptive. Can be controled via the parameters:
#           WFStaveragegain
#           WFStaveragemult
#   aol8__wfsrefc = reference stream with a series of potential corrections
#       Based on the aol8_wfsref stream, modifying it in two ways:
#           1. Subtract the stream given by the wfszpo parameter
#               The portion is controlled via WFSrefcmult.
#               Value 1 means no subtraction, 0 means full subtraction.
#           2. Feed back moving average into the reference
#               Assuming that the loop works at full capacity, the moving
#               average only contains residuals that cannot be corrected.
#               Feeding this back into the corrected reference effectively
#               removes these residuals from the measured WF.
#               The pace for the backfeeing is given by WFSrefcgain.
export CACAO_FPSPROC_ACQUWFS="ON"


# Acquire linear RM
# fps name: measlinresp-8
#   streamin = DM channels
#       default: aol8_dmRM. Created when running DMch2disp.
#   streamout = WF
#       default: aol8_imWFS2.
#       Correct value set via fpssetup.setval.conf
#   Inmodes: FITS file containing the RM poke modes.
#       Create them by calling the cacao-mkDMpokemodes script.
#       Default fitsfile will be set by aorun script.
#   Determine the hardwarelatency
export CACAO_FPSPROC_MEASURELINRESP="ON"



# Compute control matrix
# fps name: compstrCM-8
# Inputs:
#   RMmodesDM = Mirror response matrix, i.e. pokes
#       default: ../conf/RMmodesDM/RMmodesDM.fits
#   RMmodesWFS = WFS response matrix, i.e. actual linear response
#       default: ../conf/RMmodesWFS/RMmodesWFS.fits
#   dmmask = Mask for normalization
#       default: unset
#   wfsmask = Mask for normalization
#       default: unset
# Outputs:
#   CModeDM = control matrix DM modes
#       default: ../conf/CMmodesDM/CMmodesDM.fits
#   CModesWFS = control matrix WFS modes
#       default: ../conf/CMmodesWFS/CMmodesWFS.fits
export CACAO_FPSPROC_COMPSTRCM="ON"



# Extract control modes from WFS using MVM
# fps name: wfs2cmodeval-8
# Inputs:
#   insname = input stream
#       default: aol8_imWFS2
#   immodes = modes to extract (options.axmode = 0 -> extraction)
#       default: aol8_modesWFs
# Outputs:
#   outcoeff = extracted mode coefficients
#       default: aol8_modevalWFS
##export CACAO_FPSPROC_MVMGPU_WFS2CMODEVAL="ON"

# Modal control filtering
# Also features "on/off", toggling the loop.
# fpsname: mfilt-8
# Inputs:
#   inmval = input mode coefficient values
#       default: aol8_modevalWFS
#       Output of wfs2cmodeval-8, no need to change
# Outputs:
#   outmval = output mode coefficient values
#       default: aol8_modevalDM
##export CACAO_FPSPROC_MODALFILTERING="ON"

# Compute DM command from control mode values
# fps name: mvalC2dm-8
# Inputs:
#   insname = input stream
#       default: aol8_modevalDM
#       Output of mfilt-8, no need to change
#   immodes = modes to expand (options.axmode = 1 -> expansion)
#       default: aol8_DMmodes
# Outputs:
#   outcoeff = extracted mode coefficients
#       default: aol8_dmC 
#       Links to ch03 of dm combination, no need to change.
##export CACAO_FPSPROC_MVMGPU_CMODEVAL2DM="ON"


# Zero point offsetting
# Likely unnecessary in this scenario
#export CACAO_FPSPROC_MVMGPU_ZPO="ON"

## Need that? Unbound variable error in cacao-fpslistadd-SCICROPMASK
export CACAO_FPSPROC_SCICROPMASK="OFF"
export CACAO_FPSPROC_WFSCROPMASK="OFF"





# User-provided additions to cacaovars

# Run local fpslistadd files
#
shopt -s nullglob # needed to suppress error if no file found
echo "Looking for local cacaovars modifiers ($(pwd)/../cacaovars-${CACAO_LOOPNAME}*)"
for cvarf in ../cacaovars-${CACAO_LOOPNAME}*; do
echo "Processing cacaovars file ${cvarf}"
. ./${cvarf}
done
shopt -u nullglob #revert nullglob back to it's normal default state
