#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="Reshaping of 1D data into the wfs pupil"


# Extended description
MSextdescr="Reshaping of 1D images into 2d images, using the wfs mask.

Each data point of the 1D stream will be assigned to a pixel in a 2D image.
These are defined according to the wfs pupil mask.
"


source milk-script-std-config
source cacao-check-cacaovars

IM_MASK="aol${CACAO_LOOPNUMBER}_shsCam_RefMask"

# prerequisites
#
RequiredCommands=( milk )
RequiredFiles=()
RequiredPipes=()
RequiredDirs=()

# Options for the input streams
SOPTGRAD="shsGrad"
SOPTWF="shsWf"
SOPTINT="shsInt"
SOPTWFC="acqWfC"
SOPTWFAVG="acqWfAVG"

# FPS names associated with the input options
FPS_GRAD="reshape-Gradient-${CACAO_LOOPNUMBER}"
FPS_WF="reshape-Wavefront-${CACAO_LOOPNUMBER}"
FPS_INT="reshape-Intensity-${CACAO_LOOPNUMBER}"
FPS_WF_C="reshape-WF-Corrected-${CACAO_LOOPNUMBER}"
FPS_WF_AVG="reshape-WF-AVG-${CACAO_LOOPNUMBER}"

# Input stream names associated with the input options
IM_GRAD="aol${CACAO_LOOPNUMBER}_shsEval_gradOut"
IM_WF="aol${CACAO_LOOPNUMBER}_shsEval_wfOut"
IM_INT="aol${CACAO_LOOPNUMBER}_shsEval_intOut"
IM_WF_C="aol${CACAO_LOOPNUMBER}_imWFS2"
IM_WF_AVG="aol${CACAO_LOOPNUMBER}_imWFS3"

MSarg+=( "input:string:input (${SOPTGRAD}/${SOPTWF}/${SOPTINT}/${SOPTWFC}/${SOPTWFAVG})" )
MSarg+=( "action:string:action (start/stop/check)" )


source milk-argparse

STREAMOPT="${inputMSargARRAY[0]}"
ACTION="${inputMSargARRAY[1]}"
FPSNAME=""
IMNAME=""


ACTIONOK=0


if [ ${ACTION} == "check" ]; then
	ACTIONOK=1
fi

# Checking FPS & Image Streams
# Checking stream
streamcheckOK="OK"
checkstream ${IM_MASK}

FPScheckOK="OK"
case "${STREAMOPT}" in
  "${SOPTGRAD}")
  	checkstream ${IM_GRAD}
	IMNAME="${IM_GRAD}"
    checkFPSON CACAO_FPSPROC_RSHP_SHSONGPU_GRAD ${CACAO_FPSPROC_RSHP_SHSONGPU_GRAD}
    FPSNAME="${FPS_GRAD}"
    ;;
  "${SOPTWF}")
  	checkstream ${IM_WF}
	IMNAME="${IM_WF}"
    checkFPSON CACAO_FPSPROC_RSHP_SHSONGPU_WF ${CACAO_FPSPROC_RSHP_SHSONGPU_WF}
    FPSNAME="${FPS_WF}"
    ;;
  "${SOPTINT}")
  	checkstream ${IM_INT}
  	IMNAME="${IM_INT}"
    checkFPSON CACAO_FPSPROC_RSHP_SHSONGPU_INT ${CACAO_FPSPROC_RSHP_SHSONGPU_INT}
    FPSNAME="${FPS_INT}"
    ;;
  "${SOPTWFC}")
  	checkstream ${IM_WF_C}
  	IMNAME="${IM_WF_C}"
    checkFPSON CACAO_FPSPROC_RSHP_ACQWF_C ${CACAO_FPSPROC_RSHP_ACQWF_C}
    FPSNAME="${FPS_WF_C}"
    ;;
  "${SOPTWFAVG}")
  	checkstream ${IM_MASK}
	IMNAME="${IM_MASK}"
    checkFPSON CACAO_FPSPROC_RSHP_ACQWF_AVG ${CACAO_FPSPROC_RSHP_ACQWF_AVG}
    FPSNAME="${FPS_WF_AVG}"
    ;;
  *)
    echo "Unexpected input stream option. Must be either ${SOPTGRAD}, ${SOPTWF} or ${SOPTINT}."
    exit 1
    ;;
esac
echo "streamcheckOK = ${streamcheckOK}"
echo "FPScheckOK = ${FPScheckOK}"

if [ ${streamcheckOK} == "FAIL" ]; then
	echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] stream check failed"
	cacaomsglog "ERROR streamcheck"
	exit 1
fi

if [ ${FPScheckOK} == "FAIL" ]; then
	echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] FPS check failed"
	exit 1
fi

cacaomsglog "Input option: ${STREAMOPT}"

set +e
reshapeRunning=0
echo "${CACAO_LOOPNUMBER}"
echo "Check if reshaping process is running. An error message will apear if it doesn't - that's expected."
pOK=$(ps -alx| grep ${FPSNAME} | grep RUNSTART | wc -l)
if [ $pOK -gt 0 ]; then
	cacaomsglog "Process ${FPSNAME} is running"
	reshapeRunning=1
else
	cacaomsglog "Process ${FPSNAME} not currently running"
	reshapeRunning=0
fi


if [ ${ACTION} == "start" ]; then
	ACTIONOK=1
	cacaomsglog "START"

	# ======================================================================
	# Starting reshaping process
	# ======================================================================
	if [ ${reshapeRunning} == "0" ]; then
		# Check if the input stream actually exists
		echo "Checking input stream ${IMNAME} ..."
		if [ ! -f "${MILK_SHM_DIR}/${IMNAME}.im.shm" ]; then
			cacaomsglog "Input stream ${IMNAME} not existing in SHM, cannot launch process."
			exit 1
		fi

		sendFPScmd "setval ${FPSNAME}.input_name ${IMNAME}"
		sendFPScmd "setval ${FPSNAME}.mask_name ${IM_MASK}"
		sendFPScmd "confwupdate ${FPSNAME}"
		sendFPScmd "runstart ${FPSNAME}"
	else
		cacaomsglog "Reshape process already running -> nothing to do"
	fi
fi


if [ ${ACTION} == "stop" ]; then
	ACTIONOK=1
	cacaomsglog "STOP"
	sendFPScmd "runstop ${FPSNAME}"
fi


if [ ${ACTIONOK} == 0 ]; then
	echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] ACTION $ACTION undefined"
	cacaomsglog "ERROR action undefined"
	exit 1
fi


cacaomsglog "END"
